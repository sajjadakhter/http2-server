#!/usr/bin/env node

process.env.DEBUG = process.env.DEBUG || 'http2,http2:error*,ssl:certificate*'

const app       = require('express')()
const debugLog  = require('debug')('http2')
const {resolve} = require('path')

const {
  sslPort, httpPort, address, silent, push, cache, maxAge, trustCert,
  log, cors, ssl, compression, autoindex, index, URL, serverType, generateCert,
  proxy,
  args: [
    path = '.'
  ]
} = require('./options')

const onServerStart = () => {
  debugLog(`${serverType} server started on ${URL}`)
  debugLog(`Serve static from ${resolve(path)}`)
  require('./open')()
}

const startRedirectServer = () =>
  require('express')()
    .use(require('redirect-https')({port: sslPort}))
    .listen(httpPort, () => debugLog(`Http redirects to https from ${httpPort}`))


if (generateCert)
  return require('./generateCertificates').generate()

if (trustCert)
  return require('./generateCertificates').trust()

if (cors)
  app.use(require('cors')())

if (compression)
  app.use(require('shrink-ray-current')())

if (ssl && push)
  require('./naivePush').map(x => app.use(x))

if (!silent)
  app.use(require('morgan')(log))

app.use((req, res, next) => {
  if (!cache) res.set('Cache-Control', 'no-cache')
  next()
})

app.use(require('serve-static')(path, {
  index, maxAge, cacheControl: Boolean(cache || maxAge)
}))


if (proxy) {
  app.use((req, res) =>
    require('http-proxy').createProxyServer({
      secure: false,
      xfwd: true,
      changeOrigin: true,
    }).web(req, res, { target: proxy })
  )
}

if (autoindex)
  app.use(require('serve-index')(path))

require('./ssl').then(options => {
  require('spdy')
    .createServer(options, app)
    .listen(ssl ? sslPort : httpPort, address, onServerStart)

  if(ssl)
    startRedirectServer()
})
